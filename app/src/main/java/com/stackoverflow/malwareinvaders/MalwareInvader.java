package com.stackoverflow.malwareinvaders;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

/**
 * Created by waiyu on 7/14/19.
 */

/**
 * SurfaceView is a descendant of View and now PongGame is, by inheritance, also a type of View
 * We can use SurfaceView from which our game class is derived to handel all our drawing requirements
 *
 */
public class MalwareInvader  extends SurfaceView implements Runnable {
    /**
     * The DEBUGGING flag that tells if we want to debug code
     */
    private final boolean DEBUGGING = true;

    /**
     * Objects that we needed to do the drawing
     */
    private SurfaceHolder mOurHolder;
    private Canvas mCanvas;
    private Paint mPaint;

    /**
     * The numbers of frames per second we get
     * Reinitialized every frame of animation around 60 times per second
     * It will be passed into each of the game objects (every frame of animation) so that
     * they can calcualte how much time has elapsed and can then derive how far to move
     */
    private long mFPS;
    /**
     * The number of milliseconds in a second
     * use this variable in calculations as it will make our code cleared .
     */
    private final int MILLIS_IN_SECOND = 1000;

    /**
     * Holds the resolution of the screen
     * mScreenX : hold the horizontal resolution of the screen
     * mScreenY : hold the vertical resolution of the screen
     */
    private int mScreenX;
    private int mScreenY;
    /**
     * The size of text we need
     */
    private int mFontSize;
    private int mFontMargin;

    /**
     * The game objects
     */
    private Phoenix3000 mPhoenix;
    private MalwareApp mMalwareApp;
    private Firewall mFirewall;
    private SuperMalware mSuperMalware;

    /**
     * The current score and lives remaining
     */
    private int mScore;
    private int mLives;

    /** Here is the Thread and two control variables */
    private Thread mGameThread = null;
    /** This volatile variable can be accessed from inside and outside the thread*/
    private volatile boolean mPlaying;
    private boolean mPaused = true;



    /**
     * The MalwareInvader constructor : Initialize the resolution size of the screen.
     * executed from MalwareInvaderActivity
     * @param context : providing MalwareInvader with a reference to android activity
     * @param x :  horizontal screen size in pixels
     * @param y : vertical screen size in pixels
     */
    public MalwareInvader (Context context, int x, int y){
        // Super .. calls the parent class : constructor of SurfaceView provided by Android
        super(context);
        //Initialize the resolution of screen with the values passed in as parameters
        mScreenX = x;
        mScreenY = y;
        // Font is 5% (1/20th) of screen width
        mFontSize = mScreenX / 20;
        // Margin is 1.5% (1/75th) of screen width
        mFontMargin = mScreenX / 75;

        // Initialize the objects ready for drawing with getHolder is a method of SurfaceView
        // GetHolder method returns a reference which is initialized to mHolder so mHolder is now
        // that reference
        mOurHolder = getHolder();
        mPaint = new Paint();

        // Initialize the game objects

        // Everything is ready so start the game
        startNewGame();
    }

    /**
     * Start a new game including the first time we start a first game or the player has just lost
     */
    private void startNewGame(){
        // put the malwareapps back to the starting position

        // Reset the score and the player's chances
        mScore = 0;
        mLives = 3;

    }


    /** When we start the thread with:
     mGameThread.start();
     the run method is continuously called by Android
     because we implemented the Runnable interface
     Calling mGameThread.join();
     will stop the thread */
    @Override
    public void run() {
        // mPlaying gives us finer control
        // rather than just relying on  the calls to run
        // mPlaying must be true AND
        // the thread running for the main
        // loop to execute
        while (mPlaying) {
            // time now at the start of the loop
            long frameStartTime = System.currentTimeMillis();

            // Provided the game isn't paused
            // call the update method
            if (!mPaused) {
                update();
                // Now the bat and ball are in
                // their new positions
                // we can see if there have
                // been any collisions
                detectCollisions();
            }

            // The movement has been handled and collisions
            // detected now we can draw the scene
            draw();

            // How long did this frame/loop take?
            // Store the answer in timeThisFrame
            long timeThisFrame =
                    System.currentTimeMillis() - frameStartTime;

            // Make sure timeThisFrame is at least 1 millisecond
            // because accidentally dividing
            // by zero crashing the game
            if (timeThisFrame > 0) {
                // Store the current frame rate in mFPS
                // ready to pass to the update methods of
                // mBat and mBall next frame/loop
                mFPS = MILLIS_IN_SECOND/ timeThisFrame;
            }
        }
    }

    private void update() {
        // Update the entities of MalwareApp, SuperMalware and Phonenix3000
    }

    private void detectCollisions() {
        // Has the signal hit any MalwareApp

        // Has the signal hit any SuperMalware

        // Has the signal hit Phonenix3000

        // Has the signal hit the firewall
    }

    /**
     * In the future there will be a boundary detection so when MalwareApps hit the left and
     * right boundary, they change direction and move downwards.
     * When MalwareApps reach the bottom, gameover.
     */

    // This method is called by MalwareInvaderActivity
    // when the player quits the game
    public void pause() {
        // Set mPlaying to false
        // Stopping the thread isn't
        // always instant
        mPlaying = false;
        try {
            // Stop the thread
            mGameThread.join();
        } catch (InterruptedException e) {
            Log.e("Error:", "joining thread");
        }
    }



    /**
     * Draw the game objects and the HUD called from main game loop
     * drawing function which will reveal the new steps that we need to take to draw to the screen
     * 60 times per second
     */
    private void draw(){
        /* getSurface chained with a call to isValid : return true if it confirms that the area
         of memory which we want to manipulate to represent our frame of drawing is available
         This line of code check if other part of our code or Android itself is currently
         using the required portion of memory.*/
        if (mOurHolder.getSurface().isValid()) {
            // Lock the canvas (graphics memory) ready to draw
            // If another part of the code tries to access the memory while our code is accessing
            // it, it won't be able to
            mCanvas = mOurHolder.lockCanvas();

            // Fill the screen with a solid color
            mCanvas.drawColor(Color.argb(255, 255, 255, 255));
            // Choose a color to paint with
            mPaint.setColor(Color.BLACK);

            // Draw the game objects
            mPhoenix.initializePhoneix(mScreenX, mScreenY);
            mPhoenix.draw(mPhoenix.hPosition, mPhoenix.vPosition, mPaint, mCanvas);

            // Choose the font size
            mPaint.setTextSize(mFontSize);
            // Draw the HUD
            mCanvas.drawText("Scores: " + mScore + "  " + "Lives: " + mLives, mFontMargin, mFontSize, mPaint);

            if (DEBUGGING) {
                printDebuggingText();
            }
            // Display the drawing on screen
            // unlockCanvasAndPost is a method of SurfaceView
            // This method sends our newly decorated Canvas object for drawing to the screen and
            // releases the lock so that other areas of code can use it again
            mOurHolder.unlockCanvasAndPost(mCanvas);
        }

    }

    /**
     * Print debugging information
     */
    private void printDebuggingText(){
        // Hold a value that is half that of the member variable mFontSize
        int debugSize = mFontSize / 2;
        // A guess at a good position vertically to start printing the debugging text
        int debugStart = 150;
        mPaint.setTextSize(debugSize);
        mCanvas.drawText("FPS: " + mFPS, 10,debugStart + debugSize,mPaint);
    }



}
