package com.stackoverflow.malwareinvaders;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

/**
 * Created by waiyu on 7/14/19.
 */

/**
 * SurfaceView is a descendant of View and now PongGame is, by inheritance, also a type of View
 * We can use SurfaceView from which our game class is derived to handel all our drawing requirements
 *
 */
public class MalwareInvader  extends SurfaceView implements Runnable {
    /**
     * The DEBUGGING flag that tells if we want to debug code
     */
    private final boolean DEBUGGING = true;

    /**
     * Objects that we needed to do the drawing
     */
    private SurfaceHolder mOurHolder;
    private Canvas mCanvas;
    private Paint mPaint;

    /**
     * The numbers of frames per second we get
     * Reinitialized every frame of animation around 60 times per second
     * It will be passed into each of the game objects (every frame of animation) so that
     * they can calcualte how much time has elapsed and can then derive how far to move
     */
    private long mFPS;
    /**
     * The number of milliseconds in a second
     * use this variable in calculations as it will make our code cleared .
     */
    private final int MILLIS_IN_SECOND = 1000;

    /**
     * Holds the resolution of the screen
     * mScreenX : hold the horizontal resolution of the screen
     * mScreenY : hold the vertical resolution of the screen
     */
    private int mScreenX;
    private int mScreenY;
    /**
     * The size of text we need
     */
    private int mFontSize;
    private int mFontMargin;

    /**
     * The game objects
     */
    private Phoenix3000 mPhoenix;
    private MalwareApp mMalwareApp;
    private Firewall mFirewall;
    private SuperMalware mSuperMalware;

    /**
     * The current score and lives remaining
     */
    private int mScore;
    private int mLives;

    /**
     * The MalwareInvader constructor : Initialize the resolution size of the screen.
     * executed from MalwareInvaderActivity
     * @param context : providing MalwareInvader with a reference to android activity
     * @param x :  horizontal screen size in pixels
     * @param y : vertical screen size in pixels
     */
    public MalwareInvader (Context context, int x, int y){
        // Super .. calls the parent class : constructor of SurfaceView provided by Android
        super(context);
        //Initialize the resolution of screen with the values passed in as parameters
        mScreenX = x;
        mScreenY = y;
        // Font is 5% (1/20th) of screen width
        mFontSize = mScreenX / 20;
        // Margin is 1.5% (1/75th) of screen width
        mFontMargin = mScreenX / 75;

        // Initialize the objects ready for drawing with getHolder is a method of SurfaceView
        // GetHolder method returns a reference which is initialized to mHolder so mHolder is now
        // that reference
        mOurHolder = getHolder();
        mPaint = new Paint();

        // Initialize the bat and ball

        // Everything is ready so start the game
        startNewGame();
    }

    /**
     * Start a new game including the first time we start a first game or the player has just lost
     */
    private void startNewGame(){
        // put the ball back to the starting position

        // Reset the score and the player's chances
        mScore = 0;
        mLives = 3;

    }

    @Override
    public void run() {

    }


//    void setPhoenix(){
//        phoenix.initializePhoneix(numberHorizontalPixels, numberVerticalPixels);
//        phoenix.draw(phoenix.hPosition, phoenix.vPosition, paint, canvas);
//    }
//
//    void drawbackground(){
//        gameView.setImageBitmap(blankBitmap);
//
//        //Wipe the screen with a white color for now
//        canvas.drawColor(Color.argb(255,255,255,255));
//
//        Log.d("Debugging", "In draw");
//    }
}

