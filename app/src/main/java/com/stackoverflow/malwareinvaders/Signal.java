package com.stackoverflow.malwareinvaders;

import android.graphics.RectF;

class Signal {
    private RectF mRect;
    private float mYVelocity;
    private float mSignalWidth;
    private float mSignalHeight;

    // This is the constructor method
    // It is call by the code
    // mSignal = new Signal(mScreenX);
    // In the MalwareInvader class

    Signal(int screenX) {

        // Make the signal square 1% of screen width
        // This is entirely arbitrary and ready to modify
        mSignalWidth = screenX / 100;
        mSignalHeight = screenX / 100;

        // Initialize the RectF with 0, 0, 0, 0
        // We do it here because we only want to
        // do it once
        // Use the default constructor to initialize the mRect object.
        // Set left, top, right and bottom to zero.
        mRect = new RectF();
    }

    // Return a reference to mRect to PongGame
    RectF getRect() {
        return mRect;
    }

    void update(long fps) {
        // Move the signal based upon the
        // vertical (mYVelocity) speed
        // and the current frame rate (fps)

        // Move the top corner. Since it is not moving
        // horizontally, no need to update in x-direction
        mRect.top = mRect.top + (mYVelocity / fps);

        // Match up the bottom right corner
        // based on the size of the ball
        mRect.right = mRect.left + mSignalWidth;
        mRect.bottom = mRect.top + mSignalHeight;
    }

    // Signal will always be based on the position of their parent MalwareApp
    // x, y passed as (MalwareApp.getRect.left + MalwareApp.getRect.right)/2,
    // (MalwareApp.getRect.top + MalwareApp.getRect.bottom)/2
    // The right and bottom positions of signal are depending on the size of signal
    // Signal is therefore placed slightly left of the MalwareApp
    void reset(int x, int y) {

        // Initialize the four points of
        // the rectangle which defines the ball
        mRect.left = x;
        mRect.top = y;
        mRect.right = x + mSignalWidth;
        mRect.bottom = y + mSignalHeight;

        // How fast will the ball travel
        // You could vary this to suit
        // You could even increase it as the game progresses
        // to make it harder
        mYVelocity = -(y / 3);
    }

    // Depends on the stage of the game, we may need to use this method
    void increaseVelocity(){
        // increase the speed by 10%
        mYVelocity = mYVelocity * 1.1f;
    }

    // Design a method including possible effects on other objects,
    // when signal intersects with other objects
}