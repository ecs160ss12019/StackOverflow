package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class ActivityBoard extends AppCompatActivity {
    HashMap<String, Integer> myMap;
    File file;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_board);
        System.out.println("before file created.");

        try{
            file = new File(ActivityBoard.this.getFilesDir(), "myMap");
            file.createNewFile();
            FileInputStream fileInputStream  = new FileInputStream(file);
            System.out.println("file is created.");
            System.out.println("Output of the file stream: " + fileInputStream);
            ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
            System.out.println("Can this line being created?");
            myMap = (HashMap) objectInputStream.readObject();
            objectInputStream.close();
            fileInputStream.close();
        }catch(Exception e){e.printStackTrace();}

        if(myMap == null) {
            myMap = new HashMap<>();
            System.out.println("myMap is initialized.");
        }
        Button buttonBack = findViewById(R.id.backbutton);
        buttonBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                startActivity(intent);
            }
        });

        Intent mIntent = getIntent();
        int score = mIntent.getIntExtra("score", 0);
        String username = mIntent.getStringExtra("username");
        // If hash map contains the username, compared current score with old score
        // store high one
        // If hash map doesn't contain key. Put the key inside of map if it is < 5
        // Else, check the first (smallest) value if it is smaller than the score, score
        // will be recorded on the top 5.
        if(myMap.containsKey(username)){
            if (myMap.get(username) < score){
                myMap.put(username, score);
                myMap = sortByValue(myMap);
            }
        }else{
            if (myMap.size() < 5){
                myMap.put(username, score);
                myMap = sortByValue(myMap);
            }else{
                Map.Entry<String,Integer> entry = myMap.entrySet().iterator().next();
                String key = entry.getKey();
                int value =entry.getValue();
                if (value < score) {
                    myMap.remove(key);
                    myMap.put(username, score);
                    myMap = sortByValue(myMap);
                }
            }
        }

        LinearLayout linearLayout = findViewById(R.id.linearlayout1);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT);


        myMap = reverseValue(myMap);
        int i = 1;
        for (Map.Entry<String,Integer> entry : myMap.entrySet()) {
            if (entry.getKey() != null) {
                TextView textView = new TextView(this);
                textView.setLayoutParams(params);
                textView.setGravity(Gravity.CENTER_HORIZONTAL);
                textView.setTextSize(24);
                textView.setPadding(40, 40, 40, 40);
                textView.setText("RANK " + String.valueOf(i) + ": " + entry.getKey() + " " + String.valueOf(entry.getValue()));
                linearLayout.addView(textView);
                i++;
            }
        }

        try
        {
            FileOutputStream fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(myMap);
            oos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // function to sort hashmap by values
    public static HashMap<String, Integer> sortByValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
                new LinkedList<>(hm.entrySet());

        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<String, Integer> >() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        //Collections.reverse(list);

        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }

    // function to sort hashmap by values
    public static HashMap<String, Integer> reverseValue(HashMap<String, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<String, Integer> > list =
                new LinkedList<>(hm.entrySet());

        // reverse the list
        Collections.reverse(list);

        // put data from sorted list to hashmap
        HashMap<String, Integer> temp = new LinkedHashMap<>();
        for (Map.Entry<String, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }
}