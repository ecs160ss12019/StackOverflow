package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Typeface;

import java.util.ArrayList;

/**
 * This class contains all the HUD we have in game such as numbers of lives, scores and ammo
 */
class HUD {
    private int mScreenX;
    private int mScreenY;
    private Context mContext;
    Typeface mTypeface;
    private int mFontSize;
    private int mFontMarginX;
    private int mFontMarginY;
    private float heartWidth;
    private float heartHeight;
    private float left;
    private float top;
    private RectF signalClipRect;
    private float signalInnerMargin;


    //HUD(Typeface typeface, int FontSize, int FontMarginX, int FontMarginY, Context context,int ScreenX,int ScreenY) {
    HUD(Typeface typeface, GameConfig gameConf) {
        mTypeface = typeface;
        mFontSize = gameConf.mFontSize;
        mFontMarginX = gameConf.mFontMarginX;
        mFontMarginY = gameConf.mFontMarginY;
        mContext = gameConf.mContext;
        mScreenX = gameConf.mScreenX;
        mScreenY = gameConf.mScreenY;

        heartWidth = (mScreenX/20);
        heartHeight = (mScreenY/30);
        left = mScreenX - (mFontMarginX + (heartWidth * 3));
        top = mFontMarginY/2;
        signalInnerMargin = mScreenX/50;


        //signalClipRect = new RectF((mScreenX/2) - (mScreenX/10), (mScreenY/2) - (mScreenY/50), (mScreenX/2) + (mScreenX/10), (mScreenY/2) + (mScreenY/50));
        signalClipRect = new RectF();
        // dimension of Phoenix bottom margin
        signalClipRect.bottom = mScreenY - (mScreenY/50);
        // dimension of Signal height
        signalClipRect.top = signalClipRect.bottom - ((mScreenX/20) + (signalInnerMargin*2));
        signalClipRect.right = mScreenX - mFontMarginX;
        // dimension of Signal width
        signalClipRect.left = signalClipRect.right - signalInnerMargin - (((mScreenX/40)+signalInnerMargin)*3);
    }

    //void draw(Canvas mCanvas, Paint mPaint, int mLives, int mScore, ArrayList<Signal> mClip){
    void draw(GameConfig gameConf, ArrayList<Signal> mClip){

        gameConf.mPaint.setTypeface(mTypeface);
        gameConf.mPaint.setColor(Color.WHITE);
        // Choose the font size
        gameConf.mPaint.setTextSize(mFontSize);
        gameConf.mCanvas.drawText("Scores: ", mFontMarginX, mFontMarginY, gameConf.mPaint);
        float text_width = gameConf.mPaint.measureText("Scores: ");
        gameConf.mPaint.setColor(Color.YELLOW); // Could be changed later
        gameConf.mCanvas.drawText(""+ gameConf.mScore, mFontMarginX + text_width, mFontMarginY, gameConf.mPaint);

        text_width = gameConf.mPaint.measureText("Lives: ");
        gameConf.mPaint.setColor(Color.WHITE); // Could be changed later
        gameConf.mCanvas.drawText("Lives: ",left - text_width,mFontMarginY,gameConf.mPaint);

        Bitmap img = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.heart2);
        //Bitmap resizedImg = Bitmap.createScaledBitmap(img, (int)heartWidth, (int)heartHeight, true);

        for (int cnt = 0, i = 0, j = 0; cnt<gameConf.mLives; cnt++, i++){
            // Only at max 3 lives are shown per line
            if(cnt%3 == 0){
                i=0;
                j++;
            }
            gameConf.mCanvas.drawBitmap(img, left + (heartWidth * i), top * j, gameConf.mPaint);
        }

        // Draw the Signal Clip
        // We'll draw the box first
        gameConf.mPaint.setStyle(Paint.Style.STROKE);
        gameConf.mCanvas.drawRect(signalClipRect,gameConf.mPaint);

        // Now we'll check how many Signals are alive and draw them
        for (int i=mClip.size()-1, j=0; i>=0; i--) {
            if(!mClip.get(i).isAlive()){
                gameConf.mCanvas.drawBitmap(mClip.get(i).getImg(), signalClipRect.left + signalInnerMargin + (((mScreenX/40)+signalInnerMargin)*j),signalClipRect.top + signalInnerMargin, gameConf.mPaint);
                j++;
            }
        }
        // Reset the paint style
        gameConf.mPaint.setStyle(Paint.Style.FILL);

    }


}
