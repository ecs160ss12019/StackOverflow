package com.stackoverflow.malwareinvaders.main_functions;

import android.graphics.Bitmap;
import android.graphics.RectF;

class Signal extends Entities{

    // A Rect to calculate collision between old frame and new frame
    private RectF betweenRect;

    RectF getBetweenRect() { return betweenRect; }
    void updateBetweenRect() { betweenRect.bottom = mRect.bottom; }

    // This is the constructor method
    // It is call by the code
    // mSignal = new Signal(mScreenX);
    // In the MalwareInvader class

    Signal(int screenX) {
        super();
        setAlive(false);
        // Make the signal square 1% of screen width
        // This is entirely arbitrary and ready to modify
        width = screenX / 40;
        height = screenX / 20;

        // Initialize the RectF with 0, 0, 0, 0
        // We do it here because we only want to
        // do it once
        // Use the default constructor to initialize the mRect object.
        // Set left, top, right and bottom to zero.
        mRect = new RectF();
        betweenRect = new RectF();
    }

    void update(long fps) {
        // Move the signal based upon the
        // vertical (mYVelocity) speed
        // and the current frame rate (fps)

        // Move the top corner. Since it is not moving
        // horizontally, no need to update in x-direction
        mRect.top = mRect.top + (speed / fps);

        mRect.bottom = mRect.top + height;

        imgXCord = mRect.left;
        imgYCord = mRect.top;

        betweenRect.top = mRect.top;
    }

    // Signal will always be based on the position of their parent MalwareApp
    // x, y passed as (MalwareApp.getRect.left + MalwareApp.getRect.right)/2,
    // (MalwareApp.getRect.top + MalwareApp.getRect.bottom)/2
    // The right and bottom positions of signal are depending on the size of signal
    // Signal is therefore placed slightly left of the MalwareApp
    void createSignal(int x, int y, int velocity) {
        setAlive(true);
        // Initialize the four points of
        // the rectangle which defines the ball
        mRect.left = x - width/2;
        mRect.top = y - height/2;
        mRect.right = x + width/2;
        mRect.bottom = y + height/2;

        // How fast will the ball travel
        // You could vary this to suit
        // You could even increase it as the game progresses
        // to make it harder
        speed = velocity;

        imgXCord = mRect.left;
        imgYCord = mRect.top;

        betweenRect = mRect;
    }


    // Design a method including possible effects on other objects,
    // when signal intersects with other objects

}