package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.os.Vibrator;
import android.view.GestureDetector;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import java.util.ArrayList;

public class GameConfig{
    // Hold context of MalwareInvaderActivity so we can end game
    protected Context mContext;

    //Holds the resolution of the screen
    protected int mScreenX;
    protected int mScreenY;

    //The DEBUGGING flag that tells if we want to debug code
    protected final boolean DEBUGGING = true;

    //The size of text we need
    protected int mFontSize;
    protected int mFontMarginX;
    protected int mFontMarginY;

    // Number of firewalls, can ask user for input to increase/decrease difficulty.
    // We should keep it between 0-3
    // Need to fix code to position the firewalls correctly depending on how many firewall it needs to fit on the screen.
    protected int numFirewall = 3;

    //The current score and lives remaining and which level user is on
    protected int mScore;
    protected int mLives;
    protected int mLevel;

    //Objects that we needed to do the drawing
    protected Canvas mCanvas;
    protected Paint mPaint = new Paint();

    // Could change all values to int instead of float. Depends on how the game looks with float first.
    // Also need to decide protected vs private
    // Sizes
    protected float phoenixSize;
    protected float malwareAppSize;
    protected float signalWidth;
    protected float signalHeight;
    protected float virusWidth;
    protected float virusHeight;
    protected float superMalwareSize;
    protected float dropItemSize;
    protected float firewallWidth;
    protected float firewallHeight;
    protected float levelHeight;

    // Constants
    protected float lifeWidth;
    protected float lifeHeight;
    protected int numColumns;
    protected int speedInit;
    protected int superMalwareTime;
    protected Bitmap backgroundimg;

    // Velocity
    protected float dropItemVelocity;

    protected float mLastTouchX;
    // hold the total distance moving left
    protected float mLeftMoving = 0;
    // hold the total distance moving right
    protected float mRightMoving = 0;

    GameConfig(Context context, int screenX, int screenY, String difficultyLevel) {
        mContext = context;
        mScreenX = screenX;
        mScreenY = screenY;

        // Font is 7% (1/15th) of screen width
        mFontSize = mScreenX / 15;
        // MarginX is 5% (1/20th) of screen width
        mFontMarginX = mScreenX / 20;
        // MarginY is 5% (1/20th) of screen width
        mFontMarginY = mScreenY / 20;

        mFontSize = mScreenX/15;
        mFontMarginX = mScreenX/15;

        mScore = 0;
        mLives = 2; // One life gets added at startNewGame
        mLevel = 0;

        mPaint = new Paint();

        phoenixSize= (float)mScreenX/8;
        malwareAppSize = (float)mScreenX/18;
        signalWidth = (float)mScreenX/50;
        signalHeight = (float)mScreenX/15;
        virusWidth = (float)mScreenX/40;
        virusHeight = (float)mScreenX/20;
        superMalwareSize = (float)mScreenX/7;
        dropItemSize = (float)mScreenX/10;
        firewallWidth = (float)mScreenX/7;
        firewallHeight = (firewallWidth/5)*3;
        levelHeight = (float)mScreenY/20;

        lifeWidth =(float)mScreenX/20;
        lifeHeight = (float)mScreenX/15;
        //get the background img and resized to screen size
        backgroundimg = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.background2);
        backgroundimg = Bitmap.createScaledBitmap(backgroundimg, mScreenX, mScreenY, true);

        dropItemVelocity = (float)mScreenY/2;

        switch (difficultyLevel) {
            case "easy":
                numColumns = 5;
                speedInit = mScreenY;
                superMalwareTime = 0;
                break;
            case "medium":
                numColumns = 6;
                speedInit = mScreenY * 3 / 2;
                superMalwareTime = 5;
                break;
            case "hard":
                numColumns = 7;
                speedInit = mScreenY * 5 / 2;
                superMalwareTime = 10;
                break;
            default:
                numColumns = 6;
                speedInit = mScreenY * 3 / 2;
                superMalwareTime = 5;
        }
    }

    void incLives(){mLives++;}
    void decLives(){mLives--;}
}
