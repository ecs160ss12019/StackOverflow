package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.RectF;

class DropItem extends Entities {

    final int WEAPON = 0;
    final int HEALTHPOTS = 1;
    int label;


    DropItem(int screenX){
        super();

        setAlive(false);

        mRect = new RectF();

        // Make the signal square 1% of screen width
        // This is entirely arbitrary and ready to modify
        width = screenX / 10;
        height = screenX / 10;
    }

    void update(long fps) {
        // Move the signal based upon the
        // vertical (mYVelocity) speed
        // and the current frame rate (fps)
        // Move the top corner. Since it is not moving
        // horizontally, no need to update in x-direction
        mRect.top = mRect.top + (speed / fps);
        mRect.bottom = mRect.top + width;
        imgXCord = mRect.left;
        imgYCord = mRect.top;
    }

    void createItem(int x, int y, int velocity,int label,Context context){
        setAlive(true);
        // Initialize the four points of
        // the rectangle which defines the ball
        mRect.left = x - width/2;
        mRect.top = y - height/2;
        mRect.right = x + width/2;
        mRect.bottom = y + height/2;
        // How fast will the ball travel
        // You could vary this to suit
        // You could even increase it as the game progresses
        // to make it harder
        speed = velocity;
        imgXCord = mRect.left;
        imgYCord = mRect.top;
        this.label = label;

        switch(label){
            case WEAPON:
                //  This following lines of code get the image "Weapon.png"
                Bitmap img = BitmapFactory.decodeResource(context.getResources(), R.drawable.weapon);
                Bitmap resizedImg = Bitmap.createScaledBitmap(img, (int)width, (int)height, true);
                this.setImg(resizedImg);
                break;
            case HEALTHPOTS:
                //  This following lines of code get the image "potion.png"
                img = BitmapFactory.decodeResource(context.getResources(), R.drawable.potion);
                resizedImg = Bitmap.createScaledBitmap(img, (int)width, (int)height, true);
                this.setImg(resizedImg);
                break;
        }

    }

    int getLabel(){
        return this.label;
    }


}
