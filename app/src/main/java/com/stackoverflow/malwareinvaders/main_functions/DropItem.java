package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.RectF;

class DropItem extends Entities {
    protected float mYVelocity;
    protected int mItemWidth;
    protected int mItemHeight;
    private int mX;

    final int WEAPON = 0;
    final int HEALTHPOTS = 1;
    int label;


    DropItem(int screenX){
        super();
        mX = screenX;
        this.setVisible(false);
        this.mRect = new RectF();
        // Make the signal square 1% of screen width
        // This is entirely arbitrary and ready to modify
        this.mItemWidth = screenX / 10;
        this.mItemHeight = screenX / 10;
    }

    void update(long fps) {
        // Move the signal based upon the
        // vertical (mYVelocity) speed
        // and the current frame rate (fps)
        // Move the top corner. Since it is not moving
        // horizontally, no need to update in x-direction
        this.mRect.top = this.mRect.top + (this.mYVelocity / fps);
        this.mRect.bottom = this.mRect.top + this.mItemWidth;
        this.imgXCord = mRect.left;
        this.imgYCord = mRect.top;
    }

    void createItem(int x, int y, int velocity,int label,Context context){
        this.setVisible(true);
        // Initialize the four points of
        // the rectangle which defines the ball
        mRect.left = x - mItemWidth/2;
        mRect.top = y - mItemHeight/2;
        mRect.right = x + mItemWidth/2;
        mRect.bottom = y + mItemHeight/2;
        // How fast will the ball travel
        // You could vary this to suit
        // You could even increase it as the game progresses
        // to make it harder
        mYVelocity = velocity;
        imgXCord = mRect.left;
        imgYCord = mRect.top;
        this.label = label;

        switch(label){
            case WEAPON:
                //  This following lines of code get the image "Weapon.png"
                Bitmap img = BitmapFactory.decodeResource(context.getResources(), R.drawable.weapon);
                Bitmap resizedImg = Bitmap.createScaledBitmap(img, this.mItemWidth, this.mItemHeight, true);
                this.setImg(resizedImg);
                break;
            case HEALTHPOTS:
                //  This following lines of code get the image "potion.png"
                img = BitmapFactory.decodeResource(context.getResources(), R.drawable.potion);
                resizedImg = Bitmap.createScaledBitmap(img, this.mItemWidth, this.mItemHeight, true);
                this.setImg(resizedImg);
                break;
        }

    }

    int getLabel(){
        return this.label;
    }


}
