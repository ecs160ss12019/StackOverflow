package com.stackoverflow.malwareinvaders.main_functions;

import android.graphics.Bitmap;
import android.graphics.RectF;

/**
 * This class is for the weapon drop when supermalware get hit
 */

class Weapon extends Entities {

    private float mYVelocity;
    private float mWeaponWidth;
    private float mWeaponHeight;

    // Image bitmap for weapon
    private Bitmap image;
    private float imgXCord;
    private float imgYCord;
    // Some getters and setters because needs to be set original image to store it here and get to draw the image.
    Bitmap getImg(){ return image; }
    float getImgX() { return imgXCord; }
    float getImgY() { return imgYCord; }
    void setImg(Bitmap img) { image = img; }

    Weapon(int screenX) {
        super();
        this.setVisible(false);
        // Make the signal square 1% of screen width
        // This is entirely arbitrary and ready to modify
        mWeaponWidth = screenX / 30;
        mWeaponHeight = screenX / 10;
        // Initialize the RectF with 0, 0, 0, 0
        // We do it here because we only want to
        // do it once
        // Use the default constructor to initialize the mRect object.
        // Set left, top, right and bottom to zero.
        mRect = new RectF();
    }

    void update(long fps) {
        // Move the signal based upon the
        // vertical (mYVelocity) speed
        // and the current frame rate (fps)
        // Move the top corner. Since it is not moving
        // horizontally, no need to update in x-direction
        mRect.top = mRect.top + (mYVelocity / fps);
        mRect.bottom = mRect.top + mWeaponHeight;
        imgXCord = mRect.left;
        imgYCord = mRect.top;
    }

    void createWeapon(int x, int y, int velocity) {
        this.setVisible(true);
        // Initialize the four points of
        // the rectangle which defines the ball
        mRect.left = x - mWeaponWidth/2;
        mRect.top = y - mWeaponHeight/2;
        mRect.right = x + mWeaponWidth/2;
        mRect.bottom = y + mWeaponHeight/2;

        // How fast will the ball travel
        // You could vary this to suit
        // You could even increase it as the game progresses
        // to make it harder
        mYVelocity = velocity;

        imgXCord = mRect.left;
        imgYCord = mRect.top;
    }


}
