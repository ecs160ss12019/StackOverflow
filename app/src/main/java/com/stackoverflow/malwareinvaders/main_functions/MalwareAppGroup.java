package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.Log;

import java.util.ArrayList;

/**
 * Created by waiyu on 7/31/19.
 */

// This class organize a list of MalwareApps

class MalwareAppGroup {

    private ArrayList<MalwareApp> mMalwareAppGroup;
    private int numColumns;
    MalwareAppGroup(int mScreenX,Context mContext, int numColumns_input) {
        mMalwareAppGroup = new  ArrayList<>();
        numColumns = numColumns_input;
        for (int i = 0; i < 3; i++){
            for (int j = 0; j < numColumns; j++){
                if (i==0){
                    EasyMalwareApp malwareApp = new EasyMalwareApp(mScreenX,mContext);
                    mMalwareAppGroup.add(malwareApp);
                } else if (i == 1){
                    NormalMalwareApp malwareApp = new NormalMalwareApp(mScreenX,mContext);
                    mMalwareAppGroup.add(malwareApp);
                } else {
                    HardMalwareApp malwareApp = new HardMalwareApp(mScreenX,mContext);
                    mMalwareAppGroup.add(malwareApp);
                }
            }
        }

    }

    ArrayList<MalwareApp> getmMalwareAppGroup() {
        return mMalwareAppGroup;
    }

    void reset(int mScreenX, int mScreenY, int mLevel, int numColumns) {
        for (int i = 0; i < 3; i++){
            for (int j = 0; j < numColumns; j++){
                mMalwareAppGroup.get(i*numColumns+j).reset(j,i,mScreenX,mScreenY, mLevel, numColumns);
                Log.d("Malware App Position: ",""+mMalwareAppGroup.get(i*numColumns+j).getRect().bottom );
            }
        }
    }

    boolean isAllMalmareAppDead(){
        boolean deadFlag = true;
        for(MalwareApp ma : mMalwareAppGroup){
            if(ma.isAlive()) {
                deadFlag = false;
                return deadFlag;
            }
        }
        return deadFlag;
    }


    void tryFireSignal(int mScreenY){
        // First let's count the number of signals visible in the screen
        int msCount = 0;
        for (MalwareApp mApp: mMalwareAppGroup) {
            if (mApp.mSignal.isAlive())
                msCount++;
        }

        // now check if any MalwareApp wants to Fire Signal alternating from start (i) or last (j)
        for (MalwareApp mApp : mMalwareAppGroup) {
            if (!mApp.mSignal.isAlive() && mApp.isAlive()) {
                if (mApp.mSignal.msType.getShootTime() < (System.nanoTime() - mApp.mSignal.msType.signalTime)/1000000000) {
                    if (msCount < 3) {
                        mApp.fireSignal(mScreenY);
                        msCount++;
                    } else {
                        mApp.mSignal.msType.reset(System.nanoTime());
                    }
                }
            }
        }

    }

    void update(long mFPS){
        for (MalwareApp a : mMalwareAppGroup){
            a.update(mFPS);
            if (a.mSignal.isAlive()){
                a.mSignal.update(mFPS);
            }
        }
    }

    public void draw(Canvas mCanvas, Paint mPaint) {
        for (MalwareApp a : mMalwareAppGroup) {
            if (a.isAlive()){
                //mCanvas.drawRect(a.getRect(),mPaint);
                mCanvas.drawBitmap(a.getImg(), a.getImgX(), a.getImgY(), mPaint);
            }
        }
        for (MalwareApp mApp : mMalwareAppGroup) {
            if (mApp.mSignal.isAlive()) {
                mCanvas.drawBitmap(mApp.mSignal.getImg(), mApp.mSignal.getImgX(), mApp.mSignal.getImgY(), mPaint);
            }
        }
    }

    void resetTime() {
        for (MalwareApp mApp: mMalwareAppGroup) {
                mApp.mSignal.msType.reset(System.nanoTime());
        }
    }

}
