package com.stackoverflow.malwareinvaders.main_functions;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;

class MalwareApp extends Entities {
    // Use mRect to track the position of the MalwareApp
    // Later can use mRect and math relations for collision detections

    // This Signal object are public because they can be directly accessed by the game engine
    Signal mSignal;

    // This SignalType object is used to start a time counter and randomly drop a random type of shot every 5-10 seconds
    // But only 3 such shots can appear on the screen, we will control them in MalwareInvader
    SignalType msType;

    // Design the constructor method
    // It is called by mMalwareApp = new MalwareApp(mScreenX);
    // In the MalwareInvader class
    MalwareApp(int screenX) {
        super();
        // Make the MalwareApp 5% of the screen width
        // This is arbitrary at this point
        width = screenX / 18;
        height = screenX / 18;

        // initialize the signal ready for the phoenix
        mSignal = new Signal(screenX);

        // initialize the signal type
        msType = new SignalType();

        mRect = new RectF();
    }

    void fireSignal(int velocity){
        mSignal.createSignal((int)mRect.centerX(),(int)mRect.centerY(), velocity);
    }

    public void update(long fps) {
        //if (isAlive()){
        //    die();
        //}

        mRect.left = mRect.left + (speed / fps);

        // Match up the bottom right corner
        // based on the size of the MalwareApp
        mRect.right = mRect.left + width;
        mRect.bottom = mRect.top + height;

        imgXCord = mRect.left;
        imgYCord = mRect.top;
    }

    void updateVerticalPosition(int nextLevel) {
        mRect.top = mRect.top + nextLevel;
    }

    // Reverse the horizontal direction of travel
    void reverseXVelocity(){
        speed = -speed;
    }

    // Pass screenY, resolution of the screen, in order to set the
    // velocity of App in X-direction
    // Configure the left and top of the ball to 0 and 0 respectively
    // code position of the right and bottom of the MalwareApp
    // according to its size First MalwareAPP starts at the left-top
    // corner of the game
    void reset(int x, int y, int screenX, int screenY, int level) {
        setAlive(true);

        // This resets the Malware
        mRect.left = ((screenX / 10) * x) + ((screenX - (((screenX / 10) * 5) + width)) / 2);
        mRect.top = (screenY / 20) * (y + 2 + level);
        mRect.right = mRect.left + width;
        mRect.bottom = mRect.top + height;

        // The speed of the MalwareApp moves in the game
        speed = (screenY / 20);

        imgXCord = mRect.left;
        imgYCord = mRect.top;

        // reset all the signal
        mSignal.setAlive(false);
    }

    // Depends on the specified condition, we can increase the speed
    // of MalwareApp at certain stage
    void increaseVelocity(){
        // increase the speed by 10%
        speed = speed * 1.1f;
    }

    public void reset(){
    }

    public void draw(Canvas mCanvas, Paint mPaint){
    }

    public boolean checkCollision(RectF signal) {
        return false;
    }

}
