package com.stackoverflow.malwareinvaders.main_functions;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Log;

class MalwareApp extends Entities {
    // This Signal object are package private because they can be directly accessed by the game engine
    Signal mSignal;
    // Hold how much score Player can get if phoenix signal hit the malwareApp
    int mValue;

    // Design the constructor method
    MalwareApp(int screenX) {
        super();
        // Make the MalwareApp 5% of the screen width This is arbitrary at this point
        width = screenX / 18;
        height = screenX / 18;
    }

    void fireSignal(int mScreenY){
        mSignal.createSignal((int)mRect.centerX(),(int)mRect.centerY(), mScreenY);
    }

    void update(long fps) {
        mRect.left = mRect.left + (speed / fps);
        // Match up the bottom right corner
        // based on the size of the MalwareApp
        mRect.right = mRect.left + width;
        mRect.bottom = mRect.top + height;
        imgXCord = mRect.left;
        imgYCord = mRect.top;
    }

    void updateVerticalPosition(int screenY) {
        mRect.top = mRect.top + (screenY / 20);
    }

    // Reverse the horizontal direction of travel
    void reverseXVelocity(){
        speed = -speed;
    }

    // Pass screenY, resolution of the screen, in order to set the velocity of App in X-direction
    // Configure the left and top of the ball to 0 and 0 respectively code position of the right and
    // bottom of the MalwareApp according to its size First MalwareAPP starts at the left-top
    // corner of the game
    void reset(int x, int y, int screenX, int screenY, int level) {
        setAlive(true);
        // This resets the Malwares according
        mRect.left = ((screenX / 10) * x) + ((screenX - (((screenX / 10) * 5) + width)) / 2);
        mRect.top = (screenY / 20) * (y + 2 + level);
        mRect.right = mRect.left + width;
        mRect.bottom = mRect.top + height;
        // The speed of the MalwareApp moves in the game
        speed = (screenY / 20);
        //Image coordinate
        imgXCord = mRect.left;
        imgYCord = mRect.top;

        // reset all the signal
        mSignal.setAlive(false);
    }

    // Depends on the specified condition, we can increase the speed of MalwareApp at certain stage
    void increaseVelocity(){
        // increase the speed by 5%
        speed = speed * 1.05f;
    }
}


class EasyMalwareApp extends MalwareApp {
    final private SignalType msType = new SignalType(0);
    EasyMalwareApp(int screenX,Context mContext) {
        super(screenX);
        // initialize the signal ready for the phoenix
        mSignal = new Signal(screenX,msType,mContext);
        mValue = 1;
        setImg(BitmapFactory.decodeResource(mContext.getResources(), R.drawable.malwareapp1));
    }
}

class NormalMalwareApp extends MalwareApp{
    final private SignalType msType = new SignalType(1);
    NormalMalwareApp(int screenX,Context mContext) {
        super(screenX);
        mSignal = new Signal(screenX,msType,mContext);
        mValue = 2;
        setImg(BitmapFactory.decodeResource(mContext.getResources(), R.drawable.malwareapp2));
    }

}

class HardMalwareApp extends  MalwareApp{
    final private SignalType msType = new SignalType(2);

    HardMalwareApp(int screenX,Context mContext) {
        super(screenX);
        mSignal = new Signal(screenX,msType,mContext);
        mValue = 3;
        setImg(BitmapFactory.decodeResource(mContext.getResources(), R.drawable.malwareapp3));
    }


}