package com.stackoverflow.malwareinvaders.main_functions;

import android.app.Dialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.drawable.ColorDrawable;
import android.os.IBinder;
import android.os.PowerManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.graphics.Point;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.RelativeLayout;

import java.util.HashMap;
import java.util.Map;

public class MalwareInvaderActivity extends AppCompatActivity {
    /**
     Create the main game object to start the game
     */
    private MalwareInvader mMalwareInvaderGame;
    FrameLayout game;
    Dialog mdialog;
   // Dialog blur;
    HomeWatcher mHomeWatcher;
    ImageButton playButton;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        SoundManager.InitSound();
        super.onCreate(savedInstanceState);
        mdialog = new Dialog(this);
        // block out an area on the screen to display a game
        game = new FrameLayout(this);
        // Initialization by getting the screen resolution
        Display display = getWindowManager().getDefaultDisplay();
       // blur = new Dialog(MalwareInvaderActivity.this, R.style.blur);
        Point size = new Point();
        display.getSize(size);

        // this : refer to MalwareInvaderActivity and MalwareInvader class will need to perform actions (use methods)
        // Receives user input difficulty modes and send it to the game thread
        Intent mIntent = getIntent();
        String Level = mIntent.getStringExtra("level");
        GameConfig gameConf = new GameConfig(this, size.x, size.y, Level);
        mMalwareInvaderGame = new MalwareInvader(gameConf);
        game.addView(mMalwareInvaderGame,0); // adds superBreakoutGame surfaceView to the frame
        // Set game as child view
        final RelativeLayout mainLayout = (RelativeLayout) View.inflate(this, R.layout.activity_game, null);
        mainLayout.addView(game,0);
        setContentView(mainLayout);

        // Bind music service
        doBindService();
        Intent music = new Intent();
        music.setClass(this, MyService.class);
        startService(music);
        mHomeWatcher = new HomeWatcher(this);
        mHomeWatcher.setOnHomePressedListener(new HomeWatcher.OnHomePressedListener() {
            @Override
            public void onHomePressed() {
                if (mServ != null) {
                    mServ.pauseMusic();
                }
            }
            @Override
            public void onHomeLongPressed() {
                if (mServ != null) {
                    mServ.pauseMusic();
                }
            }
        });
        mHomeWatcher.startWatch();
        // set on music onclick lisner to mute or resume music
        playButton = findViewById(R.id.musicOffButton);
    }

    /*The point to note here is that by adding these overridden methods we are giving the OS the opportunity to notify us of the player's intentions in two more situations.*/
    @Override
    protected void onResume() {
        super.onResume();
        // More code here later in the chapter
        mMalwareInvaderGame.resume();
        if (mServ != null) {
            mServ.resumeMusic();
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        // More code here later in the chapter
        mMalwareInvaderGame.pause();
        mMalwareInvaderGame.sustainGame();
        showPauseMenu();
        PowerManager pm = (PowerManager)
                getSystemService(Context.POWER_SERVICE);
        boolean isScreenOn = false;
        if (pm != null) {
            isScreenOn = pm.isScreenOn();
        }
        if (!isScreenOn) {
            if (mServ != null) {
                mServ.pauseMusic();
            }
        }
    }

    @Override
    protected void onStart() {
        super.onStart();
        // More code here later in the chapter
        mMalwareInvaderGame.start();
    }

    protected void endGame(int mScore) {
        Intent intent = new Intent(getApplicationContext(), GameoverPop.class);
        intent.putExtra("score", mScore);
        startActivity(intent);

    }

    public void pauseGame(View view) {
        if ( mMalwareInvaderGame.sustainGame() ){
            showPauseMenu();
        }
    }

    private void showPauseMenu() {
        mdialog.getWindow().setDimAmount(0.6f);
        mdialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);

        mdialog.setContentView(R.layout.pause_menu);
        mdialog.setCancelable(false);

        // blur.setCancelable(false);
      //  blur.show();
        mdialog.show();
        Button resume = (Button) mdialog.findViewById(R.id.resume);
        Button mainMenu = (Button) mdialog.findViewById(R.id.mainMenu);
        resume.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view) {
                mMalwareInvaderGame.sustainGame();
                mdialog.dismiss();
               // blur.dismiss();
            }
        });
        mainMenu.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                startActivity(intent);
            }
        });
    }

    public void controlMusic(View view) {
            if (mServ != null) {
                if (mServ.isPlaying()){
                    Log.d("Music: ","pause music");
                    mServ.pauseMusic();
                    playButton.setImageResource(R.drawable.musicon);
                }else{
                    Log.d("Music: ","resume music");
                    mServ.resumeMusic();
                    playButton.setImageResource(R.drawable.musicoff);
                }
            }
    }

    private boolean mIsBound = false;
    private MyService mServ;
    private ServiceConnection Scon =new ServiceConnection(){

        public void onServiceConnected(ComponentName name, IBinder
                binder) {
            mServ = ((MyService.ServiceBinder)binder).getService();
        }

        public void onServiceDisconnected(ComponentName name) {
            mServ = null;
        }
    };

    void doBindService(){
        bindService(new Intent(this,MyService.class),
                Scon, Context.BIND_AUTO_CREATE);
        mIsBound = true;
    }

    void doUnbindService()
    {
        if(mIsBound)
        {
            unbindService(Scon);
            mIsBound = false;
        }
    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
        //Unbind music service
        doUnbindService();
        Intent music = new Intent();
        music.setClass(this,MyService.class);
        stopService(music);

    }


    @Override
    public void onBackPressed() {
        return;
    }

}
