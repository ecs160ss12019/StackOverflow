package com.stackoverflow.malwareinvaders;

import android.graphics.RectF;

class MalwareApp extends Entities {
    // Use mRect to track the position of the MalwareApp
    // Later can use mRect and math relations for collision detections
    // Use other float member variables to track the size of the MalwareApp
    private float mXVelocity;
    private float mAppWidth;
    private float mAppHeight;

    // Design the constructor method
    // It is called by mMalwareApp = new MalwareApp(mScreenX);
    // In the MalwareInvader class
    MalwareApp(int screenX) {
        super();
        // Make the MalwareApp 5% of the screen width
        // This is arbitrary at this point
        mAppWidth = screenX / 20;
        mAppHeight = screenX / 20;
        // Initialize the RectF with 0, 0, 0, 0
        // We do it here because we only want to
        // do it once
        // Use the default constructor to initialize the mRect object.
        // Set left, top, right and bottom to zero.
        mRect = new RectF();
    }

    // Return a reference to mRect to MalwareInvader
    RectF getRect() {
        return mRect;
    }

    void update(long fps) {
        // Move the ball based upon the
        // horizontal (mXVelocity) and
        // and the current frame rate (fps)

        // Move the top corner
        mRect.left = mRect.left + (mXVelocity / fps);
        // Since we don't have to update the y-coordinates,
        // we leave the update for now

        // Match up the bottom right corner
        // based on the size of the MalwareApp
        mRect.right = mRect.left + mAppWidth;
        mRect.bottom = mRect.top + mAppHeight;
    }

    void updateVerticalPosition(int screenY) {
        mRect.top = mRect.top + (screenY / 20);
    }

    // Reverse the horizontal direction of travel
    void reverseXVelocity(){
        mXVelocity = -mXVelocity;
    }

    // Pass screenY, resolution of the screen, in order to set the
    // velocity of App in X-direction
    // Configure the left and top of the ball to 0 and 0 respectively
    // code position of the right and bottom of the MalwareApp
    // according to its size First MalwareAPP starts at the left-top
    // corner of the game
    void reset(int x, int y, int screenX, int screenY) {
        this.setVisible(true);
        mRect.left = (screenX / 10) * x;
        mRect.top = (screenY / 20) * y;
        mRect.right = mRect.left + mAppWidth;
        mRect.bottom = mRect.top + mAppHeight;
        // The speed of the MalwareApp moves in the game
        mXVelocity = (screenY / 10);
    }

    // Depends on the specified condition, we can increase the speed
    // of MalwareApp at certain stage
    void increaseVelocity(){
        // increase the speed by 10%
        mXVelocity = mXVelocity * 1.1f;
    }

    // If MalwareApp hits the firewall, fireWall, Phoneix3000 will disappear
}
