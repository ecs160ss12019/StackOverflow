package com.stackoverflow.malwareinvaders.main_functions;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import java.util.ArrayList;

// Firewall contains a list of blocks that make up one big block of Firewall and carry's out computation for it's collision
class Firewall {

    // blockGroup contains a list of Blocks that we will arrange relative to the scope of fwWidth and fwHeight
    // which marks the Firewall's boundary. While fwRect is used to check for collision and give relative point to draw on the canvas.
    private ArrayList<Block> blockGroup;
    private float fwWidth;
    private float fwHeight;
    private RectF fwRect;

    Firewall(int x, int mScreenX, int mScreenY) {

        // Set the dimensions for the firewall, within which we will place 18 blocks
        // The height and width are set relative to the number of firewalls to manage space
        fwWidth = mScreenX/7;
        fwHeight = (fwWidth/5)*3;

        // Initialize the rectangle encapsulating the firewall blocks and set it's location based on number of firewall.
        fwRect = new RectF();
        fwRect.left = fwWidth*((x*2)+1);
        fwRect.top = mScreenY - (mScreenY/5);// - fwHeight;
        fwRect.right = fwRect.left + fwWidth;
        fwRect.bottom = fwRect.top + fwHeight;

        blockGroup = new ArrayList<>();

        // Because the Firewall design needs to be drawn, each row is different and needs spaced out according to the design.
        // For row 0
        int row=0;
        float space=1;
        for (int j=0; j<3; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }

        // For row 1
        row=1;
        space=(float)1/2;
        for (int j=0; j<4; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }

        // For row 2
        row=2;
        space=0;
        for (int j=0; j<5; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }

        // For row 3, first part
        row=3;
        space=0;
        for (int j=0; j<2; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }
        // For row 3, second part
        row=3;
        space=3;
        for (int j=0; j<2; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }

        // For row 4, first part
        row=4;
        space=(float)1/2;
        for (int j=0; j<1; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }
        // For row 4, second part
        row=4;
        space=(float)7/2;
        for (int j=0; j<1; j++){
            Block nBlock = new Block(row, j, space, fwRect);
            blockGroup.add(nBlock);
        }
    }

    RectF getRect() {
        return fwRect;
    }

    // Draw blocks within Firewall
    void drawBlocks(Canvas mCanvas, Paint mPaint) {

        // Draw blocks on canvas
        for (Block a : blockGroup) {
            if (a.isVisible()){
                // Set color to Red and draw Block
                mPaint.setStyle(Paint.Style.FILL);
                mPaint.setColor(Color.RED);
                mCanvas.drawRect(a.getRect(),mPaint);

                // Set color to Black and draw Border
                mPaint.setStyle(Paint.Style.STROKE);
                mPaint.setColor(Color.BLACK);
                mCanvas.drawRect(a.getRect(),mPaint);

                // Set Paint style to default Fill
                mPaint.setStyle(Paint.Style.FILL);
            }
        }

    }

    // If MalwareApp hits the firewall, we check if it hit a Block and then the block will disappear
    boolean checkCollision(RectF signal) {
        //for (Block a : blockGroup) {
        for (int i=17; i >= 0; i--) {
            if (blockGroup.get(i).isVisible()){
                if (RectF.intersects(blockGroup.get(i).getRect(), signal)){
                    // Block should turn invisible and die
                    blockGroup.get(i).setVisible(false);
                    blockGroup.get(i).setDying(true);
                    return true;
                }
            }
        }
        return false;
    }

    void reset(){
        for (Block a : blockGroup) {
            if (!a.isVisible()){
                a.reset();
            }
        }
    }
}